{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","onChange","placeholder","onClick","React","Component","style","display","justifyContent","textDecoration","todo","toggleComplete","onDelete","TodoList","todos","todoToShow","toggleAllComplete","addTodo","map","updateTodoToShow","s","handleDeleteTodo","filter","removeAllTodosThatAreComplete","Todo","key","length","some","App","count","increment","decrement","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.884b25ab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport shortid from \"shortid\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit({\r\n      id: shortid.generate(),\r\n      text: this.state.text,\r\n      complete: false,\r\n    });\r\n    this.setState({\r\n      text: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          name=\"text\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n          placeholder=\"todo...\"\r\n        />\r\n        <button onClick={this.handleSubmit}>add todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props) => (\r\n  <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n    <div\r\n      style={{\r\n        textDecoration: props.todo.complete ? \"line-through\" : \"\",\r\n      }}\r\n      onClick={props.toggleComplete}\r\n    >\r\n      {props.todo.text}\r\n    </div>\r\n    <button onClick={props.onDelete}>x</button>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\n/*\r\n  TodoMVC\r\n  1. add todo\r\n  2. display todos\r\n  3. cross off todo\r\n  4. show number of active todos\r\n  5. filter all/active/complete\r\n  6. delete todo\r\n  7. delete all complete\r\n    7.1 only show if atleast one is complete\r\n  8. button to toggle all on/off\r\n*/\r\n\r\nexport default class TodoList extends React.Component {\r\n  state = {\r\n    todos: [],\r\n    todoToShow: \"all\",\r\n    toggleAllComplete: true,\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    this.setState((state) => ({\r\n      todos: [todo, ...state.todos],\r\n    }));\r\n  };\r\n\r\n  toggleComplete = (id) => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          // suppose to update\r\n          return {\r\n            ...todo,\r\n            complete: !todo.complete,\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      }),\r\n    }));\r\n  };\r\n\r\n  updateTodoToShow = (s) => {\r\n    this.setState({\r\n      todoToShow: s,\r\n    });\r\n  };\r\n\r\n  handleDeleteTodo = (id) => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.filter((todo) => todo.id !== id),\r\n    }));\r\n  };\r\n\r\n  removeAllTodosThatAreComplete = () => {\r\n    this.setState((state) => ({\r\n      todos: state.todos.filter((todo) => !todo.complete),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter((todo) => !todo.complete);\r\n    } else if (this.state.todoToShow === \"complete\") {\r\n      todos = this.state.todos.filter((todo) => todo.complete);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <TodoForm onSubmit={this.addTodo} />\r\n        {todos.map((todo) => (\r\n          <Todo\r\n            key={todo.id}\r\n            toggleComplete={() => this.toggleComplete(todo.id)}\r\n            onDelete={() => this.handleDeleteTodo(todo.id)}\r\n            todo={todo}\r\n          />\r\n        ))}\r\n        <div>\r\n          todos left: {this.state.todos.filter((todo) => !todo.complete).length}\r\n        </div>\r\n        <div>\r\n          <button onClick={() => this.updateTodoToShow(\"all\")}>all</button>\r\n          <button onClick={() => this.updateTodoToShow(\"active\")}>\r\n            active\r\n          </button>\r\n          <button onClick={() => this.updateTodoToShow(\"complete\")}>\r\n            complete\r\n          </button>\r\n        </div>\r\n        {this.state.todos.some((todo) => todo.complete) ? (\r\n          <div>\r\n            <button onClick={this.removeAllTodosThatAreComplete}>\r\n              remove all complete todos\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n        <div>\r\n          <button\r\n            onClick={() =>\r\n              this.setState((state) => ({\r\n                todos: state.todos.map((todo) => ({\r\n                  ...todo,\r\n                  complete: state.toggleAllComplete,\r\n                })),\r\n                toggleAllComplete: !state.toggleAllComplete,\r\n              }))\r\n            }\r\n          >\r\n            toggle all complete: {`${this.state.toggleAllComplete}`}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nclass App extends Component {\n  state = {\n    count: 0,\n  };\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 1,\n    });\n  };\n\n  decrement = () => {\n    this.setState({\n      count: this.state.count - 1,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}